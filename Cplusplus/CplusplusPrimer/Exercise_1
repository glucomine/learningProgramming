#include <iostream>

#include <algorithm> // contains generic algorithms
#include <numeric>

using std::cout; using std::cin; using std::endl;

int main()
{
  /*
  typedef chat *pstring // pointer to base type char
  const pstring ctstr = 0; // const pointer to c
  const char *ctstr = 0; // wrong base type. pointer to const char
  chat *const cstr = 0; // correct way to interpret typedef const pointer to char
  */
  
  
  /*
  Exercise 2.33
  Top level const:
    - object cannot be modified
    eg) const int, int *const
  Low level const:
    - usually with pointer, pointer can be changed but object it is pointing cannot
    ** const in reference in always low level
    eg) const int*
  */
  
  /*
  auto
    - it ignores top level const
  decltype
    - unlike auto, it returns top level const.
    ** returns a reference type for expression that yield objects that can stand on the left-hand side of the assignment
    - decltype(i) e; returns variable type. it returns reference if variable is a reference
    - decltype((i)) e; treats i as an expression and returns reference
    - decltype(a = b) e; assignment returns reference
  */
  
  /*
  Generic algorithms
  
  find(iter, iter, value) // finds value within two iter range
  count(iter, iter, value) // counts the occurance of value within iter range
  count_if(iter, iter, predicate) // returns a count of how often the predicate is true
  accumulate(iter, iter, initial sum value) // sums numbers within iter range, in numeric header
  equal(v1 iter, v1 iter, v2 iter) // compare elements in containers of different types
  
  fill(iter, iter, value) // fills the container with given value within the iter range
  fill_n(iter, count, value) // fills container starting from iter position with given size and value
  copy(iter, iter, dest) // copy the content from iter range to dest container
  unique_copy(iter, iter, dest) // copy unique elements to dest but source needs to be sorted first!
  replace(iter, iter, replace this, to this) // replace values to another given value within iter range
  replace_copy(iter, iter, dest, replace this, to this) // makes a copy then do replace
  
  sort(iter, iter, predicate) // without predicate, it sorts in alphabetical order. predicate is used to customize sort func
  stable_sort(iter, iter) // maintains the original order among equal elements
  unique(iter, iter) // returns the iter right after all the unique words
  partition(iter, iter, predicate) // if predicate is true, it appears tn the first half and if predicate is false, it appears in last half.
                                   // returns iter in the middle of partitioned container
  stable_partition(iter, iter, predicate) // same as partition but it preserves the order of elements
  
  find_if(iter, iter, predicate) // calls predicate on each elem in the input range
  for_each(iter, iter, callable obj) // for each loop
  
  transform(iter, iter, iter, callable object) // first two iter is input range, third iter is destination. 
                                               // if first two iter and third iter is the same, it'll replace each elements in the input range 
  */
  
  /*
  lambda function
  [capture list] (param list) return type { func body } // lambda return type is auto by default. default return type is void if no return in func
  *** must always include capture list and func body ***
  [capture list] : defines what from the outside of the lambda should be available inside the function body and how
  eg. [] {return x;};
  
  [&v] { return v; }; // capturing v by reference
  [&, c] { } // capturing any variable by reference except c which is captured as value
  [=, &c] { } // capturing any variable by value except c which is captured as reference
  [v1] () mutable { return ++v1 } // change the value of a captured var. must have param list
  */
  
  /*
  bind - c++11
  in <functional> header
  general purpose function adaptor
  auto newCallable = bind(callable, args) where args can have form of _n (placeholders)
  placeholders are in placeholders namespace. eg) std::placeholder::_1
  
  using bind, args can be swapped
  eg) func(a,b);
  bind(func, _2, _1) means func(b,a)
  
  bind copies its args therefore ostream obj cannpt be passed in bind. to pass an object to bind without copying, library ref func must be used
  bind(func, ref(os), _1)
  
  ref, cref - non-const and const respectively. these are defined in <functional> header
  */
  
  /*
  iterators
  -Input iterator: Read, but not write. single-pass, increment only
  -Output iterator: Write, but not read. single-pass, increment only
  -Forward iterator: Read and write. multi-pass, increment only
  -Bidirectional iterator: Read and write. multi-pass, increment and decrement
  -Random-access iterator: Read and write. multi-pass, full iterator arithmatic
  
  back_inserter(container) // returns an insert iterator that inserts elements after iter, in iterator header
  front_inserter(container) // same deal with back_inserter but it inserts before the iter. front inserting {1,2,3,4} to empty list is {4,3,2,1}
  inserter(container, iter) // inserts elements before the givin iterator
  
  reverse iterators
  iter.base() gives iter after the elem that we are intersted in. find(rbegin, rend, 0) in {0, 0, 1, 1} will return iter on 3rd element
  */
  return 0;
}
