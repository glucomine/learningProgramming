############################
|  Associative containers  |
############################

Associative containers support lookup and retrieval by a key.

ordered by key
-map: associative array. key-value pairs.  ----
-multimap: map with duplicate keys            |--- in <map>
-set: container contains only key as value ---
-multiset: set with duplicate keys            |--- in <set>

unordered collection
-unordered_map: map organized by a hash func ----
-unordered_multimap                             |--- in <unordered_map>
-unordered_set: set organized by a hash func ----
-unordered_multiset                             |--- in <unordered_set>

Comparison of ordered containers key type must be "strict weak ordering"
eg. if k1 < k2, then k2 must never be less than k1
if neither key is "less than" the other, those keys are "equivalent"

auto ret = std::map.insert()
ret.first returns a pair
  |------ ret.first.first --- key value
  |------ ret.first.second --- value
ret.second returns bool telling whether insert operation was sucessful or not

Type Aliases
set<string>::value_type v1 // v1 is a string
map<string, int>::value_type v3 // v3 is pair<const string, int>
map<string, int>::key_type v4 // v4 is string
map<string, int>::mapped_type v5 // v5 is an int

Insert operation
m.insert({v1, 1});
m.insert(make_pair(v1, 1));
m.insert(pair<string, size_t>(v1, 1));
m.insert(map<string, size_t>::value_type(v1, 1));

Erase operation
m.erase(v1) // removes every v1 from m
m.erase(p) // removes element pointed by p
m.erase(b,e) // removes elements denoted by iterator b and e, returns e

Find operation
m.find(k) // finds k or returns m.end() if it doens't exist
m.count(k) // number of elements by k
m.lower_bound(k) // returns iter to first elem with k not less than k
m.upper_bound(k) // returns iter to first elem with k greater than k
m.equal_range(k) // returns pair of iter with k elem. if it doesn't exist, both are m.end()

value at key
m[k]
m.at(k)

###############
|  Pair type  |
###############

-defined in <utility>

-make_pair(v1, v2): returns a pair initialized from v1 and v2.
-p.first, p.second : returns the public data member of p named first and second respectively
- p1 (<, >, <=, >=, ==, !=) p2

multiset and multimap
c.lower_bound() - first encounter of key 
c.upper_bound() - last encounter of key

if key is not found and what we are looking for is smaller than container elements:
-lower_bound and upper_bound returns equal iterator to the point at where new key can be inserted
without disrupting the order

if key is not found and what we are looking for is larger than container elements:
-lower_bound and upper_bound returns equal iterator that points to the off end of container
