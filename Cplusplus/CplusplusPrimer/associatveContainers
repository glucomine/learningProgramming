############################
|  Associative containers  |
############################

Associative containers support lookup and retrieval by a key.

ordered by key
-map: associative array. key-value pairs.  ----
-multimap: map with duplicate keys            |--- in <map>
-set: container contains only key as value ---
-multiset: set with duplicate keys            |--- in <set>

unordered collection
-unordered_map: map organized by a hash func ----
-unordered_multimap                             |--- in <unordered_map>
-unordered_set: set organized by a hash func ----
-unordered_multiset                             |--- in <unordered_set>

Comparison of ordered containers key type must be "strict weak ordering"
eg. if k1 < k2, then k2 must never be less than k1
if neither key is "less than" the other, those keys are "equivalent"

auto ret = std::map.insert()
ret.first returns a pair
  |------ ret.first.first --- key value
  |------ ret.first.second --- value
ret.second returns bool telling whether insert operation was sucessful or not


###############
|  Pair type  |
###############

-defined in <utility>

-make_pair(v1, v2): returns a pair initialized from v1 and v2.
-p.first, p.second : returns the public data member of p named first and second respectively
- p1 (<, >, <=, >=, ==, !=) p2

multiset and multimap
c.lower_bound() - first encounter of key 
c.upper_bound() - last encounter of key

if key is not found and what we are looking for is smaller than container elements:
-lower_bound and upper_bound returns equal iterator to the point at where new key can be inserted
without disrupting the order

if key is not found and what we are looking for is larger than container elements:
-lower_bound and upper_bound returns equal iterator that points to the off end of container
